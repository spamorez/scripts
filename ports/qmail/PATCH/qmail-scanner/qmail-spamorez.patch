--- qmail-scanner-queue.template
+++ qmail-scanner-queue.template
3a4,7
> # JSC OutCom SPAMOREZ http://www.spamorez.ru
> # Version: 2.1 - patch - 20060705
> # Author: OutCom <spamorez@outcom.ru>
> #
102,103c106,107
< my $VERSION="1.25-st-qms";
< my $st_version="20050618";
---
> my $VERSION="2.1";
> my $st_version="20060705";
295c299
< # st: If sa_alt and sa_debug are enabled, *qmail-scanner* will
---
> # st: If sa_alt and sa_debug are enabled, *spamorez* will
315c319
< # in the computer, if you disable $settings_pd qmail-scanner will fall to
---
> # in the computer, if you disable $settings_pd spamorez will fall to
319c323
< # st: @scanners_default if $settings_pd is enabled qmail-scanner will
---
> # st: @scanners_default if $settings_pd is enabled spamorez will
329c333
< # "qmail-scanner-queue.pl -p" to generate $settings_per_domain.db
---
> # "spamorez-queue.pl -p" to generate $settings_per_domain.db
337c341
< # The following variable MUST NOT be modified, qmail-scanner will set
---
> # The following variable MUST NOT be modified, spamorez will set
358c362
< my $versionfile="$scandir/qmail-scanner-queue-version.txt";
---
> my $versionfile="$scandir/spamorez-queue-version.txt";
361c365
< # You edit $db_filename.txt, and "qmail-scanner-queue.pl -g" generates $db_filename.db
---
> # You edit $db_filename.txt, and "spamorez-queue.pl -g" generates $db_filename.db
647c651
<   #system("/usr/bin/printenv > /tmp/qmail-scanner.env");
---
>   #system("/usr/bin/printenv > /tmp/spamorez.env");
692c696
<   #go through the Qmail-Scanner again
---
>   #go through the Spamorez again
780c784
<       &log_msg("qmail-scanner",($quarantine_event ne "0" ? "$quarantine_event$tag_score" : "Clear$tag_score"),$elapsed_time,$msg_size,$returnpath,$recip,$headers{'subject'},$headers{$qsmsgid},$file_desc) if ($recip ne "");
---
>       &log_msg("spamorez",($quarantine_event ne "0" ? "$quarantine_event$tag_score" : "Clear$tag_score"),$elapsed_time,$msg_size,$returnpath,$recip,$headers{'subject'},$headers{$qsmsgid},$file_desc) if ($recip ne "");
784c788
<     &log_msg("qmail-scanner",($quarantine_event ne "0" ? "$quarantine_event$tag_score" : "Clear$tag_score"),$elapsed_time,$msg_size,$returnpath,$recips,$headers{'subject'},$headers{$qsmsgid},$file_desc);
---
>     &log_msg("spamorez",($quarantine_event ne "0" ? "$quarantine_event$tag_score" : "Clear$tag_score"),$elapsed_time,$msg_size,$returnpath,$recips,$headers{'subject'},$headers{$qsmsgid},$file_desc);
1578c1582
<       #The VALID_WINDOWS_EXTENSIONS is based on double-barrel virii caught in a years worth of Qmail-Scanner
---
>       #The VALID_WINDOWS_EXTENSIONS is based on double-barrel virii caught in a years worth of Spamorez
1619c1623
<       &error_condition("owner of unpacked file \"$filepath\" (uid=$uid) doesn't match UID of Qmail-Scanner (uid=$effective_uid) - can't expect this to work. Fix whatever is creating files with uid=$uid");
---
>       &error_condition("owner of unpacked file \"$filepath\" (uid=$uid) doesn't match UID of Spamorez (uid=$effective_uid) - can't expect this to work. Fix whatever is creating files with uid=$uid");
1808c1812
<     print QMQ "Received: from $remote_smtp_ip by $hostname (envelope-from <$returnpath>, uid $real_uid) with qmail-scanner-$VERSION \n";
---
>     print QMQ "Received: from $remote_smtp_ip by $hostname (envelope-from <$returnpath>, uid $real_uid) with spamorez-$VERSION \n";
1815a1820
> 	print QMQ "${V_HEADER}-Info: OutCom Spamorez (http://www.spamorez.ru)\n";
1973c1978
<   print QTINE "\n*** Qmail-Scanner Quarantine Envelope Details Begin ***\n";
---
>   print QTINE "\n*** Spamorez Quarantine Envelope Details Begin ***\n";
1981c1986
<   print QTINE "*** Qmail-Scanner Envelope Details End ***\n";
---
>   print QTINE "*** Spamorez Envelope Details End ***\n";
2025c2030
<       print ARCHIVE "\n*** Qmail-Scanner Envelope Details Begin ***\n";
---
>       print ARCHIVE "\n*** Spamorez Envelope Details Begin ***\n";
2032c2037
<       print ARCHIVE "*** Qmail-Scanner Envelope Details End ***\n";
---
>       print ARCHIVE "*** Spamorez Envelope Details End ***\n";
2052,2275d2056
<     if ($scanner eq "uvscan") {
<       open(UV,"$uvscan_binary --version|")||die "failed to call $uvscan_binary --version - $!";
<       while (<UV>) {
<         chomp;
<         if (/^Scan engine (v[0-9\.]+) /) {
<           $SCANINFO .="uvscan: $1/";
<         } elsif (/^Virus data file (v[0-9\.]+) /) {
<           $SCANINFO .= "$1. ";
<         }
<       }
<       close(UV);
<     } elsif ($scanner eq "csav") {
<       open(CS,"$csav_binary -virno|")||die "failed to call $csav_binary -virno - $!";
<       while (<CS>) {
<         chomp;
<         if (/Command Software AntiVirus for Linux (version [0-9\.]+)/) {
<           $SCANINFO .="csav: $1/";
<         } elsif (/^CSA[V]: (.*)/) {
<           $SCANINFO .= "$1/";
<         }
<       }
<       close(CS);
<     } elsif ($scanner eq "trophie" ) {
<       open(IS,"$trophie_binary -v 2>&1|")||die "failed to call $trophie_binary -v - $!";
<       while (<IS>) {
<         chomp;
<         if (/VSAPI version (.*)/) {
<           $SCANINFO .= "trophie: $1/";
<         } elsif (/Pattern version ([0-9]+) \(pattern number ([0-9]+)\)/) {
<           $SCANINFO .= "$1/$2. ";
<         }
<       }
<       close(IS);
<     } elsif ($scanner eq "iscan") {
<       open(IS,"$iscan_binary -v|")||die "failed to call $iscan_binary -v - $!";
<       while (<IS>) {
<         chomp;
<         if (/Virus Scanner (v[0-9\.]+), VSAPI (v[0-9\.\-]+)/) {
<           $SCANINFO .="iscan: $1/$2/";
<         } elsif (/Pattern version ([0-9\.]+)/) {
<           $SCANINFO .= "$1/";
<         } elsif (/Pattern number ([0-9\.]+)/) {
<           $SCANINFO .= "$1. ";
<         }
<       }
<       close(IS);
<     } elsif ($scanner eq "fsecure") {
<       open(FS,"$fsecure_binary --version|")||die "failed to call $fsecure_binary --version - $!";
<       while (<FS>) {
<         chomp;
<         if (/^F-Secure.*(Release|version)\s+([0-9\.]+)\s+build\s+([0-9]+)/i) {
<           $SCANINFO .="fsecure: $2/$3/";
<         } elsif (/sign.def version ([0-9\.]+-[0-9\.]+-[0-9\.]+)/) {
<           $SCANINFO .= "$1/";
<         } elsif (/fsmacro.def version ([0-9\.]+-[0-9\.]+-[0-9\.]+)/) {
<           $SCANINFO .= "$1/";
<         } elsif (/sign2.def version ([0-9\.]+-[0-9\.]+-[0-9\.]+)/) {
<           $SCANINFO .= "$1. ";
<         } elsif (/F-PROT database version (.*)$/) {
<           $SCANINFO .= "fprot($1)/";
<         # Patch for version F-Secure 4.52 by Jyri
<         } elsif (/AVP FPI Engine database version (.*)$/) {
<           $SCANINFO .= "avp($1). ";
<         } elsif (/Libra database version ([0-9\.]+-[0-9\.]+-[0-9\.]+)/) {
<           $SCANINFO .= "libra database $1 / ";
<         } elsif (/Orion database version ([0-9\.]+-[0-9\.]+-[0-9\.]+)/) {
<           $SCANINFO .= "orion database $1 / ";
<         } elsif (/AVP FPI Engine database version ([0-9\.]+-[0-9\.]+-[0-9\.]+)/) {
<           $SCANINFO .= "avp fpi database $1. ";
<         }
<       }
<       close(FS);
<       $SCANINFO .= ". " if ($SCANINFO !~ /\. $/);
<     } elsif ($scanner eq "fprot") { 
<       open(FP,"$fprot_binary \?|")||die "failed to call $fprot_binary --version - $!";
<       while (<FP>) {
<         chomp;
<         if (/(F-PROT|Program version:) ([0-9\.]+)/) {
<           $SCANINFO .="f-prot: $2/";
<         } elsif (/Engine version: ([0-9\.]+)/) {
<           $SCANINFO .= "$1";
<         }
<       }
<       $SCANINFO .= ". ";
<       close(FP);
<     } elsif ($scanner eq "hbedv") {
<       open(IS,"$hbedv_binary --version 2>&1 |")||die "failed to call  $hbedv_binary --version - $!";
<       while (<IS>) {
<         chomp;
<         if (/engine version:\s+([0-9\.]+)/) {
<           $SCANINFO .= "hbedv: $1";
<         } elsif (/vdf version:\s+([0-9\.]+)/) {
<           $SCANINFO .= "/$1. ";
<         }
<       }
<       close(IS);
<     } elsif ($scanner eq "avp") {
<       open(AVP,"$avp_binary -Y -VL 2>&1 |")||die "failed to call  $avp_binary -Y -VL  - $!";
<       while (<AVP>) {
<         chomp;
<         if (/Version (([0-9\.]+)\s+build ([0-9\.]+)|([0-9\.]+))/) {
<           if ($2) {
<             $SCANINFO .= "avp: $1/$2. ";
<           } else {
<             $SCANINFO .= "avp: $1. ";
<           }
<         }
<       }
<       close(AVP);
<     } elsif ($scanner eq "ravlin") {
<       open(RAV,"$ravlin_binary --version 2>&1 |")||die "failed to call  $ravlin_binary --version  - $!";
<       while (<RAV>) {
<         chomp;
<         if (/^Version: ([0-9\.]+)\./) {
<           $SCANINFO .= "ravlin: $1. ";
<         }
<       }
<       close(RAV);
<     } elsif ($scanner eq "vexira") {
<       open(VEX,"$vexira_binary --version 2>&1 |")||die "failed to call  $vexira_binary --version  - $!";
<       while (<VEX>) {
<         chomp;
<         if (/^engine version:\s+([0-9\.]+)/) {
<           $SCANINFO .= "vexira: $1. ";
<         }
<       }
<       close(RAV);
<     } elsif ($scanner eq "bitdefender") {
<       open(BITDEF,"$bitdefender_binary --info 2>&1 |")||die "failed to call $bitdefender_binary --info - $!";
<       while(<BITDEF>) {
<         chomp;
<         if (/^BDC\/Linux\-Console (.*) \(build ([^\)]+)\)/){
<           $SCANINFO .= "bitdefender: $1/$2";
<         }
<         if (/^Engine signatures:\s+([0-9]+)/) {
<           $SCANINFO .= "/$1. ";
<         }
<       }
<       close(BITDEF);
<     } elsif ($scanner eq "nod32") {
<       open(NOD,"$nod32upd_binary /help 2>&1 |")||die "failed to call $nod32upd_binary /help - $!";
<       while(<NOD>) {
<         chomp;
<         if (/^Version.* (.*)/){
<           $SCANINFO .= "nod32: $1";
<         }
<       }
<       close(NOD);
<     } elsif ($scanner eq "sophie") {
<       open(SOP,"$sophie_binary -v 2>&1|")||die "failed to call $sophie_binary -v - $!";
<       while (<SOP>) {
<         chomp;
<         if (/Sophos engine version (.*)$/) {
<           $sweep_eng=$1;
<         } elsif (/Sophos IDE version ([0-9\.]+)/) {
<           $sweep_product=$1;
<         } elsif (/Sophie version\s+:\s+([0-9\.]+)/) {
<           $sophie_eng=$1;
<         }
<       }
<       $SCANINFO .= "sophie: $sophie_eng/$sweep_eng/$sweep_product. ";
<       close(SOP);
<     } elsif ($scanner eq "sweep") {
<       open(SOP,"$sweep_binary -v|")||die "failed to call $sweep_binary -v - $!";
<       while (<SOP>) {
<         chomp;
<         if (/Engine version\s+:\s+(.*)$/) {
<           $sweep_eng=$1;
<         } elsif (/Product version\s+:\s+(.*)$/) {
<           $sweep_product=$1;
<         }
<       }
<       $SCANINFO .= "sweep: $sweep_eng/$sweep_product. "; 
<       close(SOP);
<     } elsif ($scanner eq "inocucmd") {
<       open(IOP,"$inocucmd_binary -HEL|")||die "failed to call $inocucmd_binary -HEL - $!";
<       while (<IOP>) {
<         chomp;
<         if (/Engine version:\s+(.*) ([0-9\/]+)$/) {
<           $inocucmd_eng=$1;
<         } elsif (/Data version:\s+(.*) ([0-9\/]+)$/) {
<           $inocucmd_product=$1;
<         }
<       }
<       $SCANINFO .= "inocucmd: $inocucmd_eng/$inocucmd_product. ";
<       close(IOP);
<     } elsif ($scanner eq "clamscan") {
<       open(CLAMS,"$clamscan_binary --stdout -V|")||die "failed to call $clamscan_binary --stdout -V - $!";
<       while (<CLAMS>) {
<         chomp;
<         if (/ersion ([0-9\.\-a-z]+)/i) {
<           $SCANINFO .="clamscan: $1. ";
<         }
<       }
<       close(CLAMS);
<     } elsif ($scanner eq "clamdscan") {
<       open(CLAMS,"$clamdscan_binary --version 2>&1|")||die "failed to call $clamdscan_binary --version - $!";
<       while (<CLAMS>) {
<         chomp;
<         if (/ersion ([0-9\.\-a-z]+)/i) {
<           $SCANINFO .="clamdscan: $1. ";
<         } elsif (/^ClamAV ([^\/]+)\/([^\/]+)\//) {
<           $SCANINFO .="clamdscan: $1/$2. ";
<         }
<       }
<       close(CLAMS);
<     } elsif ($scanner eq "spamassassin") {
<       #X-Spam-Checker-Version: SpamAssassin 2.01
<       open(SPAS,"$spamassassin_binary  -V |")||die "failed to call $spamassassin_binary -V - $!";
<       $spamassassin_eng="2.x";
<       while (<SPAS>) {
<         chomp;
<         if (/^SpamAssassin version (.*)$/i) {
<           $spamassassin_eng=$1;
<         }
<       }
<       close(SPAS);
<       $SCANINFO .= "spamassassin: $spamassassin_eng. ";
<     } elsif ($scanner eq "perlscan") {
<       $SCANINFO .="perlscan: $VERSION. ";
<     } else {
<       #Catch-all for other ones
<       $SCANINFO .= "$scanner: ???. ";
<     }
2276a2058
>   $SCANINFO .= "Spamorez: $VERSION. ";
2474a2257
>     print SM "${V_HEADER}-Info: OutCom Spamorez (http://www.spamorez.ru)\n";
2507c2290
<     &log_msg("qmail-scanner","Clear:$tag_score",$elapsed_time,1100,$V_FROM,$tmpsndrs,$tmpsubj,$tmpmsgid,"quarantine-event.txt:1000");
---
>     &log_msg("spamorez","Clear:$tag_score",$elapsed_time,1100,$V_FROM,$tmpsndrs,$tmpsubj,$tmpmsgid,"quarantine-event.txt:1000");
2543a2327
>     print SM "${V_HEADER}-Info: OutCom Spamorez (http://www.spamorez.ru)\n";
2567c2351
<     &log_msg("qmail-scanner","Clear:$tag_score",$elapsed_time,1100,$V_FROM,$recip,$tmpsubj,$tmpmsgid,"quarantine-event.txt:1000");
---
>     &log_msg("spamorez","Clear:$tag_score",$elapsed_time,1100,$V_FROM,$recip,$tmpsubj,$tmpmsgid,"quarantine-event.txt:1000");
